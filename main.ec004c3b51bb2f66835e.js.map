{"version":3,"file":"main.ec004c3b51bb2f66835e.js","mappings":"mBAUA,IAAIA,EAAkB,SAClBC,EAAoB,GAExB,MAAMC,EAAeC,SAASC,eAAe,YACvCC,EAAmBF,SAASC,eAAe,gBAC3CE,EAAcH,SAASC,eAAe,gBACtCG,EAAeJ,SAASC,eAAe,iBAGvCI,EAAaN,EACfO,MAAMC,KAAKR,EAAaS,iBAAiB,iBACzC,GAGEC,EAAY,CAChBC,OAAQV,SAASC,eAAe,oBAChCU,UAAWX,SAASC,eAAe,uBACnC,cAAeD,SAASC,eAAe,0BAOzC,SAASW,IACPP,EAAWQ,QAASC,IAEdA,EAAOC,QAAQC,KAAOnB,EACxBiB,EAAOG,UAAUC,IAAI,uBAGrBJ,EAAOG,UAAUE,OAAO,wBAG9B,CAuBA,SAASC,IACP,IAAKlB,EAAkB,OAGvBmB,OAAOC,OAAOb,GAAWI,QAASU,IAC5BA,GAAMA,EAAKN,UAAUC,IAAI,YAI/B,MAAMM,EAAaf,EAAUZ,GAC7B,IAAK2B,EAAY,OAGjBA,EAAWP,UAAUE,OAAO,UAG5B,MAAMM,EAAcD,EAAWE,cAAc,oBAC7C,IAAKD,EAAa,OAGlB,MAGME,EAxCR,SAAuBC,EAAMC,GAC3B,IAAKA,EACH,OAAOD,EAKT,MAAME,EAAcD,EAAWE,QAAQ,yBAA0B,QAC3DC,EAAQ,IAAIC,OAAO,IAAIH,KAAgB,MAG7C,OAAOF,EAAKG,QAAQC,EAAO,kBAC7B,CA4B6BE,CAHHT,EAAYU,aAAa,yBAGSrC,GAG1D2B,EAAYW,UAAYT,CAC1B,CAiBA,SAASU,EAAkBC,GAEzBxC,EAAoBwC,EAAMC,OAAOC,MAAMC,OAGvCrB,GACF,CAGA,SAASsB,EAAeJ,GAEtB,MAAMK,EAAiBL,EAAMC,OAAOK,QAAQ,kBAG5C,GAAID,EAAgB,CAEFA,EAAeE,cAEvB5B,UAAU6B,OAAO,kBAC3B,CACF,CA8BA9C,SAAS+C,iBAAiB,mBA3B1B,WAIE1C,EAAWQ,QAASC,IAClBA,EAAOiC,iBAAiB,QAAS,IAxCrC,SAAwBjC,GAEtBjB,EAAkBiB,EAAOC,QAAQC,GACjClB,EAAoB,GACpBK,EAAYqC,MAAQ,GAGpB5B,IACAQ,GACF,CA+B2C4B,CAAelC,MAIpDX,GACFA,EAAY4C,iBAAiB,QAASV,GAKpCjC,GACFA,EAAa2C,iBAAiB,QAASL,GAIzC9B,IACAQ,GAGF,E","sources":["webpack://campus-orientation/./src/js/main.js"],"sourcesContent":["import \"../vendor/normalize.css\";\nimport \"../blocks/body.css\";\nimport \"../blocks/header.css\";\nimport \"../blocks/nav.css\";\nimport \"../blocks/search-box.css\";\nimport \"../blocks/info-card.css\";\nimport \"../blocks/faq.css\";\nimport \"../pages/index.css\";\n\n\nlet activeSectionId = \"dining\"; // id of the info card that is visible\nlet currentSearchTerm = \"\"; //what user has typed into the search bar\n\nconst navContainer = document.getElementById(\"main-nav\");\nconst contentContainer = document.getElementById(\"main-content\");\nconst searchInput = document.getElementById(\"search-input\");\nconst faqContainer = document.getElementById(\"faq-container\");\n\n//get all the nav buttons\nconst navButtons = navContainer\n  ? Array.from(navContainer.querySelectorAll(\".nav__button\"))\n  : [];\n\n//get all the info cards & store them in an object\nconst infoCards = {\n  dining: document.getElementById(\"info-card-dining\"),\n  buildings: document.getElementById(\"info-card-buildings\"),\n  \"campus-life\": document.getElementById(\"info-card-campus-life\"),\n};\n\n//functions\n\n//updates the nav buttons to show which one is active\n\nfunction updateNavigationState() {\n  navButtons.forEach((button) => {\n    //if the button's id matches the active section id, add it\n    if (button.dataset.id === activeSectionId) {\n      button.classList.add(\"nav__button--active\");\n    } else {\n      //or else, remove active style\n      button.classList.remove(\"nav__button--active\");\n    }\n  });\n}\n\n/** //USED AI TO GENERATE THIS BLOCK OF CODE.\n * Highlights a search term within a block of text by wrapping it in <mark> tags.\n * This function includes some advanced code (RegExp) to handle special characters.\n */\nfunction highlightText(text, searchTerm) {\n  if (!searchTerm) {\n    return text; // If there's no search term, return the original text.\n  }\n\n  // This is a Regular Expression.\n  // It escapes the search term to prevent errors and finds all matches.\n  const escapedTerm = searchTerm.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  const regex = new RegExp(`(${escapedTerm})`, \"gi\");\n\n  // Replace every match with the same text wrapped in a <mark> tag.\n  return text.replace(regex, `<mark>$1</mark>`);\n}\n\n/**\n * Shows the correct info card and highlights any search terms.\n */\nfunction renderContent() {\n  if (!contentContainer) return; // Exit if the main container doesn't exist.\n\n  // 1. Hide all the info cards.\n  Object.values(infoCards).forEach((card) => {\n    if (card) card.classList.add(\"hidden\");\n  });\n\n  // 2. Find the one card that should be active.\n  const activeCard = infoCards[activeSectionId];\n  if (!activeCard) return; // Exit if there's no card for the active section.\n\n  // 3. Show the active card.\n  activeCard.classList.remove(\"hidden\");\n\n  // 4. Handle the search highlighting.\n  const textElement = activeCard.querySelector(\".info-card__text\");\n  if (!textElement) return;\n\n  // Get the original, un-highlighted text from the data attribute.\n  const originalContent = textElement.getAttribute(\"data-original-content\");\n\n  // Use our helper function to highlight the text.\n  const highlightedContent = highlightText(originalContent, currentSearchTerm);\n\n  // Update the card's content with the new highlighted version.\n  textElement.innerHTML = highlightedContent;\n}\n\n// USED AI TO GENERATE THIS BLOCK OF CODE. (END OF AI GENERATED CODE)\n\n//runs when a user clicks a nav button\nfunction handleNavClick(button) {\n  //update the state with the id of button that was clicked\n  activeSectionId = button.dataset.id;\n  currentSearchTerm = \"\"; // reset\n  searchInput.value = \"\"; // clear\n\n  //re-render the page to show changes\n  updateNavigationState();\n  renderContent();\n}\n\n//function runs whenever the user types in the search bar\nfunction handleSearchInput(event) {\n  // update the state with the new search term\n  currentSearchTerm = event.target.value.trim();\n\n  //re-render the content to apply the highlight\n  renderContent();\n}\n\n//function runs when a user clicks inside FAQ sect\nfunction handleFaqClick(event) {\n  //specific question button that was clicked on\n  const questionButton = event.target.closest(\".faq__question\");\n\n  //if a question button was clicked\n  if (questionButton) {\n    //find its parent element (entire FAQ item)\n    const faqItem = questionButton.parentElement;\n    //& toggle the openclass to show or hide answer\n    faqItem.classList.toggle(\"faq__item--open\");\n  }\n}\n\n//sets up the entire app\nfunction initializeApp() {\n  //attach event listeners to the interactive elements\n\n  //for each nav button, listen for clicks\n  navButtons.forEach((button) => {\n    button.addEventListener(\"click\", () => handleNavClick(button));\n  });\n\n  //listen for typing in the search bar\n  if (searchInput) {\n    searchInput.addEventListener(\"input\", handleSearchInput);\n  }\n\n  //listen for clicks in the FAQ section.\n  //manages clicks for all the questions inside it\n  if (faqContainer) {\n    faqContainer.addEventListener(\"click\", handleFaqClick);\n  }\n\n  //perform the first render to show the default cont\n  updateNavigationState();\n  renderContent();\n\n  console.log(\"Campus Starter App initialized successfully (function-based)\");\n}\n\n//wait til the entire HTML page is loaded before running the init code\ndocument.addEventListener(\"DOMContentLoaded\", initializeApp);\n"],"names":["activeSectionId","currentSearchTerm","navContainer","document","getElementById","contentContainer","searchInput","faqContainer","navButtons","Array","from","querySelectorAll","infoCards","dining","buildings","updateNavigationState","forEach","button","dataset","id","classList","add","remove","renderContent","Object","values","card","activeCard","textElement","querySelector","highlightedContent","text","searchTerm","escapedTerm","replace","regex","RegExp","highlightText","getAttribute","innerHTML","handleSearchInput","event","target","value","trim","handleFaqClick","questionButton","closest","parentElement","toggle","addEventListener","handleNavClick"],"sourceRoot":""}